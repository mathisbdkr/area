{
    "swagger": "2.0",
    "info": {
        "title": "Documentation for AREA Rest API",
        "contact": {}
    },
    "host": "localhost:8080",
    "paths": {
        "/about.json": {
            "get": {
                "description": "Get about.json file",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "About.json"
                ],
                "summary": "About.json",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_about.AboutGetAboutSuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs_about.AboutGetAboutInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/asana/user/workspaces": {
            "get": {
                "description": "Retrieve the workspaces from the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Asana"
                ],
                "summary": "Retrieve Asana Workspaces",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_userservice.UserServiceGetAsanaUserWorkspacesSuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs_userservice.UserServiceGetAsanaUserWorkspacesInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/asana/workspace/assignees": {
            "get": {
                "description": "Retrieve the assignees from the selected workspace",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Asana"
                ],
                "summary": "Retrieve Asana Workspace Assignees",
                "parameters": [
                    {
                        "type": "string",
                        "description": "workspace id",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_userservice.UserServiceGetAsanaWorkspaceAssigneesSuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs_userservice.UserServiceGetAsanaWorkspaceAssigneesInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/asana/workspace/projects": {
            "get": {
                "description": "Retrieve the projects from the selected workspace",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Asana"
                ],
                "summary": "Retrieve Asana Workspace Projects",
                "parameters": [
                    {
                        "type": "string",
                        "description": "workspace id",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_userservice.UserServiceGetAsanaWorkspaceProjectsSuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs_userservice.UserServiceGetAsanaWorkspaceProjectsInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/asana/workspace/tags": {
            "get": {
                "description": "Retrieve the tags from the selected workspace",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Asana"
                ],
                "summary": "Retrieve Asana Workspace Tags",
                "parameters": [
                    {
                        "type": "string",
                        "description": "workspace id",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_userservice.UserServiceGetAsanaWorkspaceTagsSuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs_userservice.UserServiceGetAsanaWorkspaceTagsInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/authentication": {
            "get": {
                "description": "Get Service OAuth2 URL",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Service OAuth2",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service name (Github, Spotify, Discord..)",
                        "name": "service",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Callback type (login or service)",
                        "name": "callbacktype",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "App type (web or mobile)",
                        "name": "apptype",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_service.ServiceOAuth2SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/docs_service.ServiceOAuth2BadRequestResponse"
                        }
                    }
                }
            }
        },
        "/discord/server/channels": {
            "get": {
                "description": "Retrieve the channels from the selected server",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Discord"
                ],
                "summary": "Retrieve Discord Server Channels",
                "parameters": [
                    {
                        "type": "string",
                        "description": "server id",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_service.ServiceGetDiscordGuildChannelsSuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs_service.ServiceGetDiscordGuildChannelsInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/discord/user/servers": {
            "get": {
                "description": "Retrieve the discord servers from the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Discord"
                ],
                "summary": "Retrieve Discord User Servers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_userservice.UserServiceGetDiscordUserServersSuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs_userservice.UserServiceGetDiscordUserServersInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/github/user/repositories": {
            "get": {
                "description": "Retrieve the repositories of the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Github"
                ],
                "summary": "Retrieve User Repositories",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_userservice.UserServiceGetGithubUserRepositoriesSuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs_userservice.UserServiceGetGithubUserRepositoriesInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/gitlab/user/projects": {
            "get": {
                "description": "Retrieve the projects of the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Gitlab"
                ],
                "summary": "Retrieve User Projects",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_userservice.UserServiceGetGitlabUserProjectsSuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs_userservice.UserServiceGetGitlabUserProjectsInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "User authentication",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.UserCredentials"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_user.UserLoginSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/docs_user.UserInvalidBodyResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/docs_user.UserLoginUnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs_user.UserLoginTokenErrorResponse"
                        }
                    }
                }
            }
        },
        "/login-callback": {
            "post": {
                "description": "Callback for login",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Callbacks"
                ],
                "summary": "Login Callback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization code given by the service",
                        "name": "code",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Callback informations",
                        "name": "callback-informations",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.CallbackInformations"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_user.UserLoginCallbackSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/docs_user.UserLoginCallbackBadRequestResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs_user.UserLoginCallbackInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "description": "User logout",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Logout",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_user.UserLogoutUserSuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs_user.UserLogoutUserInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Create user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Register",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.UserCredentials"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_user.UserRegisterSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/docs_user.UserRegisterBadRequestResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/docs_user.UserRegisterConflictResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs_user.UserInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/service-authentication-status": {
            "get": {
                "description": "Checks if connected user is authenticated to the specified service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User Service Authentication Status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service name (Github, Spotify, Discord..)",
                        "name": "service",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_userservice.UserServiceGetUserServiceAuthenticationStatusSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/docs_userservice.UserServiceGetUserServiceAuthenticationStatusBadRequestResponse"
                        }
                    }
                }
            }
        },
        "/service-callback": {
            "post": {
                "description": "Callback for services",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Callbacks"
                ],
                "summary": "Service Callback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization code given by the service",
                        "name": "code",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Callback informations",
                        "name": "callback-informations",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.CallbackInformations"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_userservice.UserServiceServiceCallbackSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/docs_userservice.UserServiceServiceCallbackBadRequestResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs_userservice.UserServiceServiceCallbackInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/services": {
            "get": {
                "description": "Retrieve services",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Retrieve Services",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_service.ServiceRetrieveAllServicesSuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs_service.ServiceInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/services/action/{actionid}": {
            "get": {
                "description": "Retrieve service by action id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Retrieve Service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Action id",
                        "name": "actionid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_service.ServiceRetrieveServiceByIdSuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs_service.ServiceRetrieveServiceByIdInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/services/actions": {
            "get": {
                "description": "Retrieve services with actions available",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Retrieve Services With Actions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_service.ServiceRetrieveActionsReactionsServicesSuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs_service.ServiceInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/services/reaction/{reactionid}": {
            "get": {
                "description": "Retrieve service by reaction id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Retrieve Service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Reaction id",
                        "name": "reactionid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_service.ServiceRetrieveServiceByIdSuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs_service.ServiceRetrieveServiceByIdInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/services/reactions": {
            "get": {
                "description": "Retrieve services with reactions available",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Retrieve Services With Reactions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_service.ServiceRetrieveActionsReactionsServicesSuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs_service.ServiceInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/services/{id}": {
            "get": {
                "description": "Retrieve service by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Retrieve Service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_service.ServiceRetrieveServiceByIdSuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs_service.ServiceRetrieveServiceByIdInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "description": "Retrieve informations about the user's connected",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Retrieve User's Informations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_user.UserGetUserSuccessResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/docs_user.UserGetUserUnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs_user.UserGetUserInternalServerErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete the user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete Account",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_user.UserDeleteAccountSuccessResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/docs_user.UserDeleteAccountUnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs_user.UserDeleteAccountInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/modify-password": {
            "put": {
                "description": "Modify the user password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Modify Password",
                "parameters": [
                    {
                        "description": "New password of the user",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.UserModifyPassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_user.UserModifyPasswordSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/docs_user.UserModifyPasswordBadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/docs_user.UserModifyPasswordUnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/docs_user.UserModifyPasswordOldPasswordNotValidResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs_user.UserModifyPasswordInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/workflows": {
            "get": {
                "description": "Retrieve the workflows of the user actually connected",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workflows"
                ],
                "summary": "Retrieve User's Workflows",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_workflow.WorkflowRetrieveUserWorkflowsSuccessResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/docs_workflow.WorkflowRetrieveUserWorkflowsUnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs_workflow.WorkflowRetrieveUserWorkflowsInternalServerErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a workflow",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workflows"
                ],
                "summary": "Create Workflow",
                "parameters": [
                    {
                        "description": "Workflow informations",
                        "name": "workflow",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.NewWorkflow"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_workflow.WorkflowCreateWorkflowSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/docs_workflow.WorkflowCreateWorkflowBadRequestResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/docs_workflow.WorkflowCreateWorkflowUnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs_workflow.WorkflowCreateWorkflowInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/workflows/{id}": {
            "put": {
                "description": "Update a user's workflow by specifying the workflow id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workflows"
                ],
                "summary": "Update Workflow",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Workflow id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Workflow informations",
                        "name": "workflow",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.UpdatedWorkflow"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_workflow.WorkflowUpdateWorkflowSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/docs_workflow.WorkflowUpdateWorkflowBadRequestResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs_workflow.WorkflowUpdateWorkflowInternalServerErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a user's workflow by specifying the workflow id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workflows"
                ],
                "summary": "Delete Workflow",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Workflow id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_workflow.WorkflowDeleteWorkflowSuccessResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/docs_workflow.WorkflowDeleteWorkflowUnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/docs_workflow.WorkflowDeleteWorkflowInternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/{service}/actions": {
            "get": {
                "description": "Retrieve actions from requested service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service"
                ],
                "summary": "Retrieve Actions From Service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service name (Google, Spotify, Time \u0026 Date..)",
                        "name": "service",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_service.ServiceRetrieveActionsFromServiceSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/docs_service.ServiceRetrieveActionsFromServiceBadRequestResponse"
                        }
                    }
                }
            }
        },
        "/{service}/reactions": {
            "get": {
                "description": "Retrieve reactions from requested service",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Service"
                ],
                "summary": "Retrieve Reactions From Service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service name (Google, Spotify, Time \u0026 Date..)",
                        "name": "service",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/docs_service.ServiceRetrieveReactionsFromServiceSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/docs_service.ServiceRetrieveReactionsFromServiceBadRequestResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "docs_about.AboutGetAboutInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Could not retrieve informations about the server"
                }
            }
        },
        "docs_about.AboutGetAboutSuccessResponse": {
            "type": "object",
            "properties": {
                "about": {
                    "$ref": "#/definitions/entities.About"
                }
            }
        },
        "docs_service.DiscordChannelExample": {
            "type": "object",
            "properties": {
                "flags": {
                    "type": "integer"
                },
                "guild_id": {
                    "type": "string"
                },
                "icon_emoji": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/docs_service.DiscordChannelIconEmojiExample"
                    }
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nsfw": {
                    "type": "boolean"
                },
                "parent_id": {
                    "type": "string"
                },
                "permission_overwrites": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/docs_service.DiscordChannelPermissionOverwritesExample"
                    }
                },
                "position": {
                    "type": "integer"
                },
                "rate_limite_per_user": {
                    "type": "integer"
                },
                "theme_color": {
                    "type": "string"
                },
                "topic": {
                    "type": "string"
                },
                "type": {
                    "type": "integer"
                }
            }
        },
        "docs_service.DiscordChannelIconEmojiExample": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "docs_service.DiscordChannelPermissionOverwritesExample": {
            "type": "object",
            "properties": {
                "allow": {
                    "type": "string"
                },
                "deny": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "type": {
                    "type": "integer"
                }
            }
        },
        "docs_service.ServiceGetDiscordGuildChannelsInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Could not retrieve the server's channels"
                }
            }
        },
        "docs_service.ServiceGetDiscordGuildChannelsSuccessResponse": {
            "type": "object",
            "properties": {
                "channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/docs_service.DiscordChannelExample"
                    }
                }
            }
        },
        "docs_service.ServiceInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Internal server error"
                }
            }
        },
        "docs_service.ServiceOAuth2BadRequestResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid callback type-Invalid app type-Unknown service"
                }
            }
        },
        "docs_service.ServiceOAuth2SuccessResponse": {
            "type": "object",
            "properties": {
                "auth-url": {
                    "type": "string",
                    "example": "url-example.com"
                }
            }
        },
        "docs_service.ServiceRetrieveActionsFromServiceBadRequestResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Unknown service"
                }
            }
        },
        "docs_service.ServiceRetrieveActionsFromServiceSuccessResponse": {
            "type": "object",
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Action"
                    }
                }
            }
        },
        "docs_service.ServiceRetrieveActionsReactionsServicesSuccessResponse": {
            "type": "object",
            "properties": {
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Service"
                    }
                }
            }
        },
        "docs_service.ServiceRetrieveAllServicesSuccessResponse": {
            "type": "object",
            "properties": {
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Service"
                    }
                }
            }
        },
        "docs_service.ServiceRetrieveReactionsFromServiceBadRequestResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Unknown service"
                }
            }
        },
        "docs_service.ServiceRetrieveReactionsFromServiceSuccessResponse": {
            "type": "object",
            "properties": {
                "reactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Reaction"
                    }
                }
            }
        },
        "docs_service.ServiceRetrieveServiceByIdInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Could not retrieve requested service"
                }
            }
        },
        "docs_service.ServiceRetrieveServiceByIdSuccessResponse": {
            "type": "object",
            "properties": {
                "service": {
                    "$ref": "#/definitions/entities.Service"
                }
            }
        },
        "docs_user.UserDeleteAccountInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Could not delete account"
                }
            }
        },
        "docs_user.UserDeleteAccountSuccessResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "string",
                    "example": "Account deleted"
                }
            }
        },
        "docs_user.UserDeleteAccountUnauthorizedResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Email not found in token-Email is not a valid string-Connection type not found in token-Connection type is not a valid string"
                }
            }
        },
        "docs_user.UserGetUserInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Could not find user"
                }
            }
        },
        "docs_user.UserGetUserSuccessResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/docs_user.UserInfosExample"
                }
            }
        },
        "docs_user.UserGetUserUnauthorizedResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Email not found in token-Email is not a valid string"
                }
            }
        },
        "docs_user.UserInfosExample": {
            "type": "object",
            "properties": {
                "connectiontype": {
                    "type": "string"
                },
                "createdat": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                }
            }
        },
        "docs_user.UserInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Internal server error"
                }
            }
        },
        "docs_user.UserInvalidBodyResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request body"
                }
            }
        },
        "docs_user.UserLoginCallbackBadRequestResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request body-Invalid code authorization"
                }
            }
        },
        "docs_user.UserLoginCallbackInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Failed to connect with requested service"
                }
            }
        },
        "docs_user.UserLoginCallbackSuccessResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "string",
                    "example": "Connection successful"
                }
            }
        },
        "docs_user.UserLoginSuccessResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "string",
                    "example": "Connection successful"
                }
            }
        },
        "docs_user.UserLoginTokenErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Error creating token"
                }
            }
        },
        "docs_user.UserLoginUnauthorizedResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Could not find requested user-Wrong password"
                }
            }
        },
        "docs_user.UserLogoutUserInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Could not find user"
                }
            }
        },
        "docs_user.UserLogoutUserSuccessResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "string",
                    "example": "Logout successful"
                }
            }
        },
        "docs_user.UserModifyPasswordBadRequestResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request body-Could not find requested user"
                }
            }
        },
        "docs_user.UserModifyPasswordInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Failed to hash password-Could not modify the password"
                }
            }
        },
        "docs_user.UserModifyPasswordOldPasswordNotValidResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Old password is incorrect"
                }
            }
        },
        "docs_user.UserModifyPasswordSuccessResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "string",
                    "example": "Password modified"
                }
            }
        },
        "docs_user.UserModifyPasswordUnauthorizedResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Email not found in token-Email is not a valid string-Connection type not found in token-Connection type is not a valid string"
                }
            }
        },
        "docs_user.UserRegisterBadRequestResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request body-Connection type doesn't exist"
                }
            }
        },
        "docs_user.UserRegisterConflictResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Email address already used"
                }
            }
        },
        "docs_user.UserRegisterSuccessResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "string",
                    "example": "New user created"
                }
            }
        },
        "docs_userservice.DiscordServerExample": {
            "type": "object",
            "properties": {
                "banner": {
                    "type": "string"
                },
                "features": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "icon": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "boolean"
                },
                "permissions": {
                    "type": "string"
                }
            }
        },
        "docs_userservice.UserServiceGetAsanaUserWorkspacesInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Could not retrieve the user's workspaces"
                }
            }
        },
        "docs_userservice.UserServiceGetAsanaUserWorkspacesSuccessResponse": {
            "type": "object",
            "properties": {
                "workspaces": {
                    "$ref": "#/definitions/entities.AsanaWorkspacesInfo"
                }
            }
        },
        "docs_userservice.UserServiceGetAsanaWorkspaceAssigneesInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Could not retrieve workspace's assignees"
                }
            }
        },
        "docs_userservice.UserServiceGetAsanaWorkspaceAssigneesSuccessResponse": {
            "type": "object",
            "properties": {
                "assignees": {
                    "$ref": "#/definitions/entities.AsanaWorkspacesInfo"
                }
            }
        },
        "docs_userservice.UserServiceGetAsanaWorkspaceProjectsInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Could not retrieve workspace's projects"
                }
            }
        },
        "docs_userservice.UserServiceGetAsanaWorkspaceProjectsSuccessResponse": {
            "type": "object",
            "properties": {
                "projects": {
                    "$ref": "#/definitions/entities.AsanaWorkspacesInfo"
                }
            }
        },
        "docs_userservice.UserServiceGetAsanaWorkspaceTagsInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Could not retrieve workspace's tags"
                }
            }
        },
        "docs_userservice.UserServiceGetAsanaWorkspaceTagsSuccessResponse": {
            "type": "object",
            "properties": {
                "tags": {
                    "$ref": "#/definitions/entities.AsanaWorkspacesInfo"
                }
            }
        },
        "docs_userservice.UserServiceGetDiscordUserServersInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Could not retrieve the user's repositories"
                }
            }
        },
        "docs_userservice.UserServiceGetDiscordUserServersSuccessResponse": {
            "type": "object",
            "properties": {
                "servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/docs_userservice.DiscordServerExample"
                    }
                }
            }
        },
        "docs_userservice.UserServiceGetGithubUserRepositoriesInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Could not retrieve the user's repositories"
                }
            }
        },
        "docs_userservice.UserServiceGetGithubUserRepositoriesSuccessResponse": {
            "type": "object",
            "properties": {
                "repositories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.GithubRepository"
                    }
                }
            }
        },
        "docs_userservice.UserServiceGetGitlabUserProjectsInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Could not retrieve the user's projects"
                }
            }
        },
        "docs_userservice.UserServiceGetGitlabUserProjectsSuccessResponse": {
            "type": "object",
            "properties": {
                "projects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.GitlabProject"
                    }
                }
            }
        },
        "docs_userservice.UserServiceGetUserServiceAuthenticationStatusBadRequestResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Could not find requested user-Unknown service"
                }
            }
        },
        "docs_userservice.UserServiceGetUserServiceAuthenticationStatusSuccessResponse": {
            "type": "object",
            "properties": {
                "authenticated": {
                    "type": "boolean"
                }
            }
        },
        "docs_userservice.UserServiceServiceCallbackBadRequestResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request body-Invalid code authorization-Invalid app type"
                }
            }
        },
        "docs_userservice.UserServiceServiceCallbackInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Failed to get email-Failed to update token"
                }
            }
        },
        "docs_userservice.UserServiceServiceCallbackSuccessResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "string",
                    "example": "Token generated"
                }
            }
        },
        "docs_workflow.WorkflowCreateWorkflowBadRequestResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request body"
                }
            }
        },
        "docs_workflow.WorkflowCreateWorkflowInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Could not create workflow"
                }
            }
        },
        "docs_workflow.WorkflowCreateWorkflowSuccessResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "string",
                    "example": "Successful workflow creation"
                }
            }
        },
        "docs_workflow.WorkflowCreateWorkflowUnauthorizedResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Email not found in token-Email is not a valid string-Connection type not found in token-Connection type is not a valid string"
                }
            }
        },
        "docs_workflow.WorkflowDeleteWorkflowInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Could not delete workflow"
                }
            }
        },
        "docs_workflow.WorkflowDeleteWorkflowSuccessResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "string",
                    "example": "Workflow deleted"
                }
            }
        },
        "docs_workflow.WorkflowDeleteWorkflowUnauthorizedResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Email not found in token-Email is not a valid string-Connection type not found in token-Connection type is not a valid string"
                }
            }
        },
        "docs_workflow.WorkflowReceiveServiceWebhookBadRequestResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request body"
                }
            }
        },
        "docs_workflow.WorkflowReceiveServiceWebhookSuccessResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "string",
                    "example": "Webhook received"
                }
            }
        },
        "docs_workflow.WorkflowRetrieveUserWorkflowsInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Could not retrieve user's workflows"
                }
            }
        },
        "docs_workflow.WorkflowRetrieveUserWorkflowsSuccessResponse": {
            "type": "object",
            "properties": {
                "workflows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Workflow"
                    }
                }
            }
        },
        "docs_workflow.WorkflowRetrieveUserWorkflowsUnauthorizedResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Email not found in token-Email is not a valid string-Connection type not found in token-Connection type is not a valid string"
                }
            }
        },
        "docs_workflow.WorkflowUpdateWorkflowBadRequestResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request body"
                }
            }
        },
        "docs_workflow.WorkflowUpdateWorkflowInternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Could not update workflow"
                }
            }
        },
        "docs_workflow.WorkflowUpdateWorkflowSuccessResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "string",
                    "example": "Workflow successfully updated"
                }
            }
        },
        "entities.About": {
            "type": "object",
            "properties": {
                "client": {
                    "$ref": "#/definitions/entities.AboutClient"
                },
                "server": {
                    "$ref": "#/definitions/entities.AboutServer"
                }
            }
        },
        "entities.AboutAction": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "entities.AboutClient": {
            "type": "object",
            "properties": {
                "host": {
                    "type": "string"
                }
            }
        },
        "entities.AboutReaction": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "entities.AboutServer": {
            "type": "object",
            "properties": {
                "current_time": {
                    "type": "integer"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.AboutService"
                    }
                }
            }
        },
        "entities.AboutService": {
            "type": "object",
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.AboutAction"
                    }
                },
                "name": {
                    "type": "string"
                },
                "reactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.AboutReaction"
                    }
                }
            }
        },
        "entities.Action": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nbparam": {
                    "type": "integer"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": true
                    }
                },
                "serviceid": {
                    "type": "string"
                }
            }
        },
        "entities.AsanaWorkspacesInfo": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "gid": {
                                "type": "string"
                            },
                            "name": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "entities.CallbackInformations": {
            "type": "object",
            "properties": {
                "apptype": {
                    "type": "string"
                },
                "service": {
                    "type": "string"
                }
            }
        },
        "entities.GithubRepository": {
            "type": "object",
            "properties": {
                "full_name": {
                    "type": "string"
                }
            }
        },
        "entities.GitlabProject": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "entities.NewWorkflow": {
            "type": "object",
            "properties": {
                "actiondata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "actionid": {
                    "type": "string"
                },
                "actionparam": {
                    "type": "object",
                    "additionalProperties": true
                },
                "name": {
                    "type": "string"
                },
                "reactionid": {
                    "type": "string"
                },
                "reactionparam": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "entities.Reaction": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nbparam": {
                    "type": "integer"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": true
                    }
                },
                "serviceid": {
                    "type": "string"
                }
            }
        },
        "entities.Service": {
            "type": "object",
            "properties": {
                "color": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "hasactions": {
                    "type": "boolean"
                },
                "hasreactions": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "isauthneeded": {
                    "type": "boolean"
                },
                "logo": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "entities.UpdatedWorkflow": {
            "type": "object",
            "properties": {
                "actionid": {
                    "type": "string"
                },
                "actionparam": {
                    "type": "object",
                    "additionalProperties": true
                },
                "isactivated": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "reactionid": {
                    "type": "string"
                },
                "reactionparam": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "entities.UserCredentials": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "entities.UserModifyPassword": {
            "type": "object",
            "properties": {
                "oldpassword": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "entities.Workflow": {
            "type": "object",
            "properties": {
                "actiondata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "actionid": {
                    "type": "string"
                },
                "actionparam": {
                    "type": "object",
                    "additionalProperties": true
                },
                "createdat": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isactivated": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "ownerid": {
                    "type": "string"
                },
                "reactionid": {
                    "type": "string"
                },
                "reactionparam": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        }
    }
}